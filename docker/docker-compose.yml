version: '3.8'

services:
  # Medical Chatbot API
  medical-chatbot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: medical-chatbot-api
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENV=${PINECONE_ENV}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - MONGO_URI=mongodb://mongodb:27017/medical_chatbot
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=False
      - USE_CUDA=0
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      - mongodb
      - redis
    restart: unless-stopped
    networks:
      - medical-chatbot-network

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: medical-chatbot-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=medical_chatbot
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - medical-chatbot-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: medical-chatbot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - medical-chatbot-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: medical-chatbot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - medical-chatbot
    restart: unless-stopped
    networks:
      - medical-chatbot-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: medical-chatbot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - medical-chatbot-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: medical-chatbot-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - medical-chatbot-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  medical-chatbot-network:
    driver: bridge
